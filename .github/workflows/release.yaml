name: Multi-Arch Nix Release (v2)

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  checks: read
  deployments: read
  issues: read
  pull-requests: read
  id-token: write

jobs:
  prep-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prep.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Setup Nu Tools
        uses: ck3mp3r/actions/nu-tools@main

      - name: Prepare release
        id: prep
        shell: nu {0}
        run: |
          use nu-tools *
          setup-git-user

          let current_version = (open Cargo.toml).package.version
          let latest_tag = (get-latest-tag)
          let version = (semver-calculate $latest_tag $current_version | create-release-branch)
          update-cargo-version $version | commit-files $"Prepare release ($version)"
          $"version=($version)" | save --append $env.GITHUB_OUTPUT

  build:
    needs: prep-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            nix_system: x86_64-linux
          - os: macos-14
            nix_system: aarch64-darwin
          - os: ubuntu-latest
            nix_system: aarch64-linux
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release/${{ needs.prep-release.outputs.version }}

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v20

      - name: Build for ${{ matrix.nix_system }}
        run: nix build .#${{ matrix.nix_system }}

      - name: Copy build outputs for uniqueness
        run: |
          cp result/nu-mcp.tgz ${{ github.workspace }}/nu-mcp-${{ needs.prep-release.outputs.version }}-${{ matrix.nix_system }}.tgz
          cp result/nu-mcp.sha256 ${{ github.workspace }}/nu-mcp-${{ needs.prep-release.outputs.version }}-${{ matrix.nix_system }}.sha256
          cp result/nu-mcp-nix.sha256 ${{ github.workspace }}/nu-mcp-${{ needs.prep-release.outputs.version }}-${{ matrix.nix_system }}-nix.sha256

      - name: Upload build outputs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nu-mcp-assets-${{ matrix.nix_system }}
          path: |
            ${{ github.workspace }}/nu-mcp-${{ needs.prep-release.outputs.version }}-${{ matrix.nix_system }}.tgz
            ${{ github.workspace }}/nu-mcp-${{ needs.prep-release.outputs.version }}-${{ matrix.nix_system }}.sha256
            ${{ github.workspace }}/nu-mcp-${{ needs.prep-release.outputs.version }}-${{ matrix.nix_system }}-nix.sha256

  finalize-release:
    needs:
      - prep-release
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v2
        id: token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT }}

      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: release/${{ needs.prep-release.outputs.version }}
          fetch-depth: 0
          token: ${{ steps.token.outputs.token }}

      - name: Setup Nu Tools
        uses: ck3mp3r/actions/nu-tools@main

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Finalize release
        shell: nu {0}
        run: |
          use nu-tools *
          setup-git-user

          let version = "${{ needs.prep-release.outputs.version }}"

          # Generate platform data and commit
          generate-platform-data-for $version "nu-mcp" "./artifacts" | commit-files $"Add platform data for release ($version)"

          # Create release and upload artifacts using gh CLI
          create-github-release $version
          glob "./artifacts/**/*.*" | upload-release-artifacts $version

          # Merge and cleanup
          merge-and-cleanup $version
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}